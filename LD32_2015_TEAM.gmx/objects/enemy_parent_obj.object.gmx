<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>max_health = 100;
current_health = 100;
healtick = 0;

_weapon = NULL;

weapon = NULL;
weapon_aim = 0;
weapon_x = x;
weapon_y = y;
weapon_scale = 1;
fireTimer = 60;

healthbar_id = instance_create(x, y, health_bar_obj);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(player_obj)
{
    weapon_aim = point_direction(x, y, player_obj.x, player_obj.y);
}

weapon_x = x+12+lengthdir_x(25, weapon_aim);
weapon_y = y+12+lengthdir_y(25, weapon_aim);

if(weapon_aim &gt; 90 &amp;&amp; weapon_aim &lt;=270)
{
    weapon_scale = -1;
}
else
{
    weapon_scale = 1;
}

var wepData = weapon_data(weapon);

if wepData != NULL
{
    switch wepData[? WEPTAG_TYPE ]
    {
        case WEPTYPE_PROJECTILE:
            if fireTimer &lt;= 0
            {
                if object_exists(wepData[? WEPTAG_PROJECTILE ])
                {
                    var o = instance_create(weapon_x,weapon_y,wepData[? WEPTAG_PROJECTILE ]);
                    
                    with o
                    {
                        direction = other.weapon_aim;
                        creator = other.id;
                    }
                }
                
                fireTimer = room_speed*wepData[? WEPTAG_FIRE_RATE ];
            }
            else
            {
                fireTimer -= 1;
            }
        break;
        
        case WEPTYPE_MELEE:
            if instance_exists(player_obj)
            {
                var dist = distance_to_object(player_obj);
                if (fireTimer &lt;= 0 and (dist &lt;= (wepData[? WEPTAG_RANGE ] * 50)))  
                {

                    var o = instance_create(weapon_x,weapon_y,wepData[? WEPTAG_PROJECTILE ]);    
                    
                    with o
                        {
                            direction = other.weapon_aim;
                            creator = other.id;
                        }
                    fireTimer = room_speed*wepData[? WEPTAG_FIRE_RATE ];
                }else
                    fireTimer -= 1;
            }
                break;
            }
            
}


//Old Healthbar
/*if(current_health &gt;=0)
{
    healthbar_id.image_xscale = current_health / max_health;
}
else
{
    healthbar_id.image_xscale = 0;
}

healthbar_id.x = x - 4;
healthbar_id.y = y - 20;*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="heal_hitbox_obj">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if((current_health &lt; max_health*2))
    {
        if(instance_exists(heal_hitbox_obj) and place_meeting(x,y,heal_hitbox_obj)){
        current_health += global.healValue;
        }
    }




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="explosion_obj">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>current_health -= 10 - other.image_xscale;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="projectile_obj">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (other.creator != id)
{
current_health -= 10;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();

var hpScale = current_health / max_health;
draw_set_color(c_maroon);
draw_rectangle(x-4,y-9,x+(28*hpScale),y-4,false);
draw_set_color(c_red);
draw_rectangle(x-4,y-9,x+28,y-4,true);

if weapon != NULL
{
    var wepData = weapon_data(weapon);
    var wepSpr = wepData[? WEPTAG_SPRITE];
    if sprite_exists(wepSpr)
    {
        draw_sprite_ext(wepSpr,0,weapon_x,weapon_y,1,weapon_scale,weapon_aim,c_white,1);
    }
}


//draw_sprite_ext(health_bar_spr,0,x-4,y-20,current_health / max_health,1,0,c_white,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
